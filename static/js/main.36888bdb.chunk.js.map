{"version":3,"sources":["DatabaseURL.jsx","components/Contact.jsx","components/ContactsList.jsx","components/Header.jsx","components/Form.jsx","components/Loading.jsx","components/Message.jsx","App.js","index.js"],"names":["url","Contact","contact","setContacts","setEdit","setShowForm","setSuccessMessage","setErrorMessage","_id","name","lastName","email","phone","deleteUser","id","a","fetch","method","headers","ok","prevContacts","filter","capitalizer","word","charAt","toUpperCase","slice","className","onClick","ContactsList","contactsList","map","index","Header","setSearchField","type","onChange","e","target","value","placeholder","Form","useState","setName","setLastName","setEmail","setPhone","errorMessage","addContact","data","trim","toLowerCase","body","JSON","stringify","response","json","message","editContact","newContacts","onSubmit","preventDefault","maxLength","Loading","Message","App","contacts","edit","showForm","successMessage","loading","setLoading","searchField","useEffect","console","error","fetchData","filteredList","includes","Object","keys","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.36888bdb.chunk.js","sourcesContent":["// const DATABASE = \"http://localhost:3001\";\r\nconst DATABASE = \"https://contactsaved.herokuapp.com\";\r\n\r\nconst url = DATABASE;\r\n\r\nexport { url };","import React from 'react';\r\nimport { url } from '../DatabaseURL';\r\nimport './Contact.scss';\r\n\r\nconst Contact = ({ contact, setContacts, setEdit, setShowForm, setSuccessMessage, setErrorMessage }) => {\r\n\r\n    const { _id, name, lastName, email, phone } = contact;\r\n\r\n    const deleteUser = async (id) => {\r\n        setErrorMessage(\"\");\r\n        setSuccessMessage(\"\");\r\n        try {\r\n            let response = await fetch(`${url}/contacts/delete/${id}`, {\r\n                method: 'DELETE',\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            });\r\n            if (response.ok) {\r\n                setContacts(prevContacts => {\r\n                    const newContacts = prevContacts.filter(contact => contact._id !== id);\r\n                    return newContacts;\r\n                })\r\n                setSuccessMessage(\"Contact deleted successfully\");\r\n            } else {\r\n                setErrorMessage(\"Couldn't delete the contact\");\r\n            }\r\n        } catch {\r\n            setErrorMessage(\"Couldn't delete the contact\");\r\n        }\r\n    };\r\n\r\n    const editContact = () => {\r\n        setEdit(contact);\r\n        setShowForm(true);\r\n    }\r\n\r\n    const capitalizer = (word) => {\r\n        const firstLetter = word.charAt(0).toUpperCase();\r\n        const rest = word.slice(1);\r\n        return firstLetter + rest;\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"contact-card\">\r\n\r\n            <h3 className=\"info name\">{`${capitalizer(name)} ${capitalizer(lastName)}`}</h3>\r\n            <label>Email:</label>\r\n            <div className=\"info email\">{email}</div>\r\n            <label>Phone:</label>\r\n            <div className=\"info phone\">{phone}</div>\r\n            <div className=\"control-box\">\r\n                <div className=\"edit-user\" onClick={editContact} ><i className=\"fas fa-pen\" /></div>\r\n                <div className=\"delete-user\" onClick={() => deleteUser(_id)} ><i className=\"fas fa-trash-alt\" /></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Contact\r\n","import React from 'react'\r\nimport Contact from './Contact';\r\nimport './ContactsList.scss';\r\n\r\nconst ContactsList = ({ contactsList, setContacts, setEdit, setShowForm, setSuccessMessage, setErrorMessage }) => {\r\n    return (\r\n        <div className=\"contacts-list\">\r\n            {contactsList.map((contact, index) => {\r\n                return <Contact key={index} contact={contact} setContacts={setContacts} setEdit={setEdit} setShowForm={setShowForm} setSuccessMessage={setSuccessMessage} setErrorMessage={setErrorMessage} />\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ContactsList\r\n","import React from 'react';\r\nimport './Header.scss';\r\n\r\nconst Header = ({ setSearchField, setShowForm }) => {\r\n    return (\r\n        <div className=\"header\">\r\n            <i className=\"logo fas fa-users\"></i>\r\n            <input type=\"text\" className=\"searchField\" onChange={(e) => setSearchField(e.target.value)} placeholder=\"Search contact...\" />\r\n            <button className=\"add-button\" onClick={() => setShowForm(true)}><i className=\"fas fa-user-plus\" /></button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React, { useState } from 'react';\r\nimport { url } from '../DatabaseURL';\r\nimport './Form.scss';\r\n\r\nconst Form = ({ setContacts, contact, setShowForm, setEdit }) => {\r\n\r\n    const [name, setName] = useState('');\r\n    const [lastName, setLastName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [phone, setPhone] = useState('');\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n\r\n\r\n    const addContact = async () => {\r\n        setErrorMessage('');\r\n        if (name === '' || lastName === '' || email === '' || phone === '') return setErrorMessage(\"All fields required\");\r\n        const data = { name: name.trim(), lastName: lastName.trim(), email: email.toLowerCase().trim(), phone: phone.trim() };\r\n        try {\r\n            let response = await fetch(`${url}/contacts/new`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    \"Accpet\": \"application/json\",\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify(data)\r\n            });\r\n            let json = await response.json();\r\n            if (json.message) {\r\n                setErrorMessage(json.message);\r\n            } else {\r\n                setContacts(prevContacts => {\r\n                    return [...prevContacts, json]\r\n                })\r\n                setShowForm(false);\r\n            }\r\n        } catch {\r\n            setErrorMessage(\"Something went wrong.\");\r\n        }\r\n    }\r\n\r\n    const editContact = async (id) => {\r\n\r\n        setErrorMessage('');\r\n        const data = { name: name.trim(), lastName: lastName.trim(), email: email.toLowerCase().trim(), phone: phone.trim() };\r\n\r\n        if (data.name === '') data.name = contact.name;\r\n        if (data.lastName === '') data.lastName = contact.lastName;\r\n        if (data.email === '') data.email = contact.email;\r\n        if (data.phone === '') data.phone = contact.phone;\r\n\r\n        try {\r\n            let response = await fetch(`${url}/contacts/edit/${contact._id}`, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    \"Accpet\": \"application/json\",\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify(data)\r\n            });\r\n            let json = await response.json();\r\n            if (json.message) {\r\n                setErrorMessage(json.message);\r\n            } else {\r\n                setContacts(prevContacts => {\r\n                    const newContacts = prevContacts.map(contact => contact._id === id ? json : contact);\r\n                    return [...newContacts]\r\n                })\r\n                setShowForm(false);\r\n                setEdit({});\r\n            }\r\n        } catch {\r\n            setErrorMessage(\"Something went wrong\");\r\n        }\r\n\r\n    }\r\n\r\n    const closeForm = () => {\r\n        setShowForm(false);\r\n        if (contact) setEdit({});\r\n    }\r\n\r\n    const formSubmit = (e) => {\r\n        e.preventDefault();\r\n        contact ? editContact(contact._id) : addContact();\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"add-container\">\r\n            <form className=\"add-form\" onSubmit={formSubmit}>\r\n                <div className=\"close-form\" onClick={closeForm}><i className=\"fas fa-times-circle\"></i></div>\r\n                <label>Name{contact ? null : \"*\"}</label>\r\n                <input type=\"text\" onChange={e => setName(e.target.value)} placeholder={contact ? contact.name : null} maxLength=\"20\" />\r\n                <label>Last Name{contact ? null : \"*\"}</label>\r\n                <input type=\"text\" onChange={e => setLastName(e.target.value)} placeholder={contact ? contact.lastName : null} maxLength=\"20\" />\r\n                <label>Email{contact ? null : \"*\"}</label>\r\n                <input type=\"email\" onChange={e => setEmail(e.target.value)} placeholder={contact ? contact.email : null} />\r\n                <label>Phone{contact ? null : \"*\"}</label>\r\n                <input type=\"text\" onChange={e => setPhone(e.target.value)} placeholder={contact ? contact.phone : null} maxLength=\"50\" />\r\n                {contact ? null : <div className=\"required\">(*)Required</div>}\r\n                <div className=\"error-message\">{errorMessage}</div>\r\n                <button type=\"submit\" >{contact ? \"SAVE\" : \"ADD\"}</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form","import React from 'react';\r\nimport './Loading.scss';\r\n\r\nconst Loading = () => {\r\n    return (\r\n        <div className=\"loading\">\r\n            <div className=\"content-wrapper\">\r\n                <div className=\"text\">Loading</div>\r\n                <div className=\"spinner\"></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loading\r\n","import React from 'react';\r\nimport './Message.scss';\r\n\r\nconst Message = ({ message, type }) => {\r\n    return (\r\n        <div className=\"message-wrapper\">\r\n            <div className={`message ${type === \"error\" ? \"error\" : \"success\"}`}>\r\n                {message}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message\r\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport ContactsList from './components/ContactsList';\nimport Header from './components/Header';\nimport Form from './components/Form';\nimport Loading from './components/Loading';\nimport Message from './components/Message';\nimport { url } from './DatabaseURL';\n\n\nfunction App() {\n  const [contacts, setContacts] = useState([]);\n  const [edit, setEdit] = useState({});\n  const [showForm, setShowForm] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [searchField, setSearchField] = useState('');\n\n\n  useEffect(() => {\n\n    const fetchData = async () => {\n      try {\n        let response = await fetch(`${url}/contacts`);\n        let contacts = await response.json();\n        setContacts(contacts);\n        setLoading(false);\n      } catch (err) {\n        setLoading(false);\n        setErrorMessage(\"There was an error. Try again later.\")\n        console.error(err);\n      }\n    }\n    fetchData();\n  }, [])\n\n  const filteredList = contacts.filter(contact => {\n    return contact.name.toLowerCase().includes(searchField.toLowerCase()) || contact.lastName.toLowerCase().includes(searchField.toLowerCase());\n  })\n\n  return (\n    <div className=\"App\">\n      <Header setSearchField={setSearchField} setShowForm={setShowForm} />\n      {\n        showForm && (Object.keys(edit).length !== 0 ?\n          <Form setContacts={setContacts} contact={edit} setShowForm={setShowForm} setEdit={setEdit} />\n          :\n          <Form setContacts={setContacts} setShowForm={setShowForm} />)\n      }\n      <div className=\"contacts-box\">\n        {loading ? <Loading />\n          :\n          contacts.length === 0 ?\n            <div className=\"no-contacts\">There are no contacts yet</div>\n            :\n            <ContactsList contactsList={filteredList} setContacts={setContacts} setEdit={setEdit} setShowForm={setShowForm} setSuccessMessage={setSuccessMessage} setErrorMessage={setErrorMessage} />\n\n        }\n        {errorMessage && <Message message={errorMessage} type=\"error\" />}\n        {successMessage && <Message message={successMessage} type=\"success\" />}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}